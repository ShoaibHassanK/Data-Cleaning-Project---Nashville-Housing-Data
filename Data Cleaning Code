-- LOOKING INTO THE DATASET

SELECT *
FROM housing_project..[Nashville Housing Data ]

-- Dynamic SQL for Descriptive Analysis (Just Testing How Dynamic SQL Works)
-- Analyzing the column specified in @columnname variable

DECLARE @columnname NVARCHAR(255)
SET @columnname='ParcelID'

DECLARE @sql NVARCHAR(MAX)
SET @sql='
SELECT 
    COUNT( '+ QUOTENAME(@columnname) + ') AS Total_Enteries,
    COUNT(DISTINCT ' + QUOTENAME(@columnname) + ') AS Distinct_Enteries,
    COUNT( ' + QUOTENAME(@columnname) +') - COUNT(DISTINCT ' + QUOTENAME(@columnname) +') AS Duplicate_Enteries,
    (SELECT COUNT(UniqueID)
        FROM housing_project..[Nashville Housing Data ]
        WHERE '+ QUOTENAME(@columnname) + ' IS NULL) AS Null_Enteries
FROM housing_project..[Nashville Housing Data ]';

EXEC sp_executesql @sql

-- I have analyzed different columns in the dataset. I will try to either populate NULLS in the PropertyAddress column or drop them.
-- SELF JOINING TABLE

SELECT a.ParcelID, a.PropertyAddress, b.ParcelID, b.PropertyAddress, ISNULL(a.PropertyAddress, b.PropertyAddress)
FROM housing_project..[Nashville Housing Data ] a
JOIN housing_project..[Nashville Housing Data ] b
ON a.ParcelID=b.ParcelID
  AND a.UniqueID <> b.UniqueID
WHERE a.PropertyAddress IS NULL

-- Updating Table while populating PropertyAddress - ISNULL can also be used to populate NULL Values in a column by any String. e.g ISNULL(a.PropertyAddress, ' No Address Found')

UPDATE a
SET PropertyAddress=ISNULL(a.PropertyAddress, b.PropertyAddress)
FROM housing_project..[Nashville Housing Data ] a
JOIN housing_project..[Nashville Housing Data ] b
ON a.ParcelID = b.ParcelID
WHERE a.UniqueID <> b.UniqueID
    AND a.PropertyAddress IS NULL


       
-- BREAKING OUT ADDRESS INTO DIFFERENT COLUMNS ( Address, City, State)
SELECT
SUBSTRING(PropertyAddress, 1, CHARINDEX(',', PropertyAddress)) AS Address
FROM housing_project..[Nashville Housing Data ]


-- ALTER ( This command is used to change the structure of any Object in SQL, e.g Adding, Removing Columns or Constraints) 
-- UPDATE ( This command is used to modify the data in the table )

-- I am using -1, so that our P_Address column does not include a comma

ALTER TABLE housing_project..[Nashville Housing Data]
ADD P_Address NVARCHAR(255)

UPDATE housing_project..[Nashville Housing Data ]
SET P_Address = SUBSTRING(PropertyAddress, 1, (CHARINDEX(',', PropertyAddress))-1)
FROM housing_project..[Nashville Housing Data ] 


-- Extracting City from Column PropertyAddress

ALTER TABLE housing_project..[Nashville Housing Data ]
ADD P_City NVARCHAR(255)

UPDATE housing_project..[Nashville Housing Data ]
SET P_City = SUBSTRING(PropertyAddress, CHARINDEX(',', PropertyAddress) + 1, LEN(PropertyAddress) - CHARINDEX(',', PropertyAddress))


-- EXTRACTING Different Values from COLUMN NAME OwnerAddress(Address, City, State)

SELECT OwnerAddress,
       SUBSTRING(OwnerAddress, 1, CHARINDEX(',', OwnerAddress) - 1) AS O_Address,
       SUBSTRING(Temp_Address, 1, CHARINDEX(',', Temp_Address) - 1) AS City,
       SUBSTRING(Temp_Address, CHARINDEX(',', Temp_Address) + 1, LEN(Temp_Address) - CHARINDEX(',', Temp_Address)) AS State_
FROM (
    SELECT OwnerAddress,
           SUBSTRING(OwnerAddress, (CHARINDEX(',', OwnerAddress) + 1), LEN(OwnerAddress) - CHARINDEX(',', OwnerAddress)) AS Temp_Address
    FROM housing_project..[Nashville Housing Data]
) AS subquery

-- Easy way for extracting OwnerAddress is using PARSENAME 


SELECT OwnerAddress,
       PARSENAME(REPLACE(OwnerAddress,',','.'),3) AS O_Address,
	   PARSENAME(REPLACE(OwnerAddress,',','.'),2) AS O_City,
	   PARSENAME(REPLACE(OwnerAddress,',','.'),1) AS O_State

	   FROM [Nashville Housing Data ]


-- ADDING ABOVE CREATED COLUMNS INTO OUT ACTUAL TABLE

SELECT*
FROM [Nashville Housing Data ]

ALTER TABLE [Nashville Housing Data ]
ADD Owner_Address NVARCHAR(255),
    Owner_City NVARCHAR(255),
	Owner_State NVARCHAR(255)


	UPDATE [Nashville Housing Data ]
	SET Owner_Address=  PARSENAME(REPLACE(OwnerAddress,',','.'),3),
	    Owner_City=  PARSENAME(REPLACE(OwnerAddress,',','.'),2),
		Owner_State=  PARSENAME(REPLACE(OwnerAddress,',','.'),1)
	    

-- Renaming the Column name using a system Stored Procedure

sp_rename '[Nashville Housing Data ].P_Address', 'Property_Address', 'COLUMN';
sp_rename '[Nashville Housing Data ].P_City', 'Property_City', 'COLUMN';


SELECT *
FROM [Nashville Housing Data ]

-- Analyzing the column SoldAsVacant as replacing 0='NO' and 1='YES'

SELECT DISTINCT (SoldAsVacant), COUNT(SoldAsVacant)
FROM [Nashville Housing Data ]
GROUP BY SoldAsVacant

-- try running this code but got the following error: - Conversion failed when converting the varchar value 'YES' to data type bit.

UPDATE [Nashville Housing Data ]
SET SoldAsVacant 
WHERE SoldAsVacant=1

-- NOW will first ALTER THE DATA TYPE OF COLUMN WITH IN AN OBJECT TABLE  - YOU CAN ACHIEVE THE BELOW WITH CASE STATEMENTS AS WELL LOOKINTO THAT

ALTER TABLE [Nashville Housing Data ]
ALTER COLUMN SoldAsVacant VARCHAR(3)

UPDATE [Nashville Housing Data ]
SET SoldAsVacant='YES'
WHERE SoldAsVacant=1

UPDATE [Nashville Housing Data ]
SET SoldAsVacant='NO'
WHERE SoldAsVacant='0'


-- REMOVING DUPLICATES: 
-- Usually the best practice is to create temp tables and send these dupicates there

SELECT *
FROM [Nashville Housing Data ]


WITH Removing_Duplicates AS (
SELECT *,
ROW_NUMBER() OVER (
        PARTITION BY ParcelID, PropertyAddress, SaleDate, LegalReference
		ORDER BY UniqueID) AS RANK_
		FROM [Nashville Housing Data ] )

DELETE 
FROM Removing_Duplicates
WHERE RANK_ = 2

--CHECKING IF DUPLICATES ARE ACTUALLY REMOVED OR NOT

WITH Removing_Duplicates AS (
SELECT *,
ROW_NUMBER() OVER (
        PARTITION BY ParcelID, PropertyAddress, SaleDate, LegalReference
		ORDER BY UniqueID) AS RANK_
		FROM [Nashville Housing Data ] )

SELECT *
FROM Removing_Duplicates
WHERE RANK_ = 2

-- Removing Un-Used Columns

-- Usually removing unused columns is done for the views not for the raw data
		
		-- I WILL BE REMOVING PropertyAddress and OwnerAddress as we have already splited them into other columns:

ALTER TABLE [Nashville Housing Data]
DROP COLUMN PropertyAddress;

ALTER TABLE [Nashville Housing Data]
DROP COLUMN OwnerAddress;

SELECT*
FROM [Nashville Housing Data ]



